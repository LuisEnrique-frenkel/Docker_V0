[global_tags]

[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  # hostname = "192.xxx.0.xxx"
  omit_hostname = false


# Read metrics about cpu usage
# [[inputs.cpu]]
#   ## Whether to report per-cpu stats or not
#   percpu = true
#   ## Whether to report total system cpu stats or not
#   totalcpu = true
#   ## If true, collect raw CPU time metrics
#   collect_cpu_time = false
#   ## If true, compute and report the sum of all non-idle CPU states
#   report_active = false
#   ## If true and the info is available then add core_id and physical_id tags
#   core_tags = false


[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false


# # Retrieve data from OPCUA devices
# [[inputs.opcua]]
#   ## Metric name
#   # name = "opcua"
#   #
#   ## OPC UA Endpoint URL
#   endpoint = "opc.tcp://localhost:4840"
#   #
#   ## Maximum time allowed to establish a connect to the endpoint.
#   connect_timeout = "10s"
#   #
#   ## Maximum time allowed for a request over the established connection.
#   request_timeout = "5s"

#   # Maximum time that a session shall remain open without activity.
#   session_timeout = "20m"
#   #
#   ## Security policy, one of "None", "Basic128Rsa15", "Basic256",
#   ## "Basic256Sha256", or "auto"
#   security_policy = "auto"
#   #
#   ## Security mode, one of "None", "Sign", "SignAndEncrypt", or "auto"
#   security_mode = "auto"
#   #
#   ## Path to cert.pem. Required when security mode or policy isn't "None".
#   ## If cert path is not supplied, self-signed cert and key will be generated.
#   # certificate = "/etc/telegraf/cert.pem"
#   #
#   ## Path to private key.pem. Required when security mode or policy isn't "None".
#   ## If key path is not supplied, self-signed cert and key will be generated.
#   # private_key = "/etc/telegraf/key.pem"
#   #
#   ## Authentication Method, one of "Certificate", "UserName", or "Anonymous".  To
#   ## authenticate using a specific ID, select 'Certificate' or 'UserName'
#   auth_method = "Anonymous"
#   #
#   ## Username. Required for auth_method = "UserName"
#   # username = ""
#   #
#   ## Password. Required for auth_method = "UserName"
#   # password = ""
#   #
#   ## Option to select the metric timestamp to use. Valid options are:
#   ##     "gather" -- uses the time of receiving the data in telegraf
#   ##     "server" -- uses the timestamp provided by the server
#   ##     "source" -- uses the timestamp provided by the source
#   # timestamp = "gather"
#   #
#   ## Client trace messages
#   ## When set to true, and debug mode enabled in the agent settings, the OPCUA
#   ## client's messages are included in telegraf logs. These messages are very
#   ## noisey, but essential for debugging issues.
#   # client_trace = false
#   #
#   ## Include additional Fields in each metric
#   ## Available options are:
#   ##   DataType -- OPC-UA Data Type (string)
#   # optional_fields = []
#   #
#   ## Node ID configuration
#   ## name              - field name to use in the output
#   ## namespace         - OPC UA namespace of the node (integer value 0 thru 3)
#   ## identifier_type   - OPC UA ID type (s=string, i=numeric, g=guid, b=opaque)
#   ## identifier        - OPC UA ID (tag as shown in opcua browser)
#   ## tags              - extra tags to be added to the output metric (optional); deprecated in 1.25.0; use default_tags
#   ## default_tags      - extra tags to be added to the output metric (optional)
#   ##
#   ## Use either the inline notation or the bracketed notation, not both.
#   #
#   ## Inline notation (default_tags not supported yet)
#   # nodes = [
#   #   {name="", namespace="", identifier_type="", identifier="", tags=[["tag1", "value1"], ["tag2", "value2"]},
#   #   {name="", namespace="", identifier_type="", identifier=""},
#   # ]
#   #
#   ## Bracketed notation
#   # [[inputs.opcua.nodes]]
#   #   name = "node1"
#   #   namespace = ""
#   #   identifier_type = ""
#   #   identifier = ""
#   #   default_tags = { tag1 = "value1", tag2 = "value2" }
#   #
#   # [[inputs.opcua.nodes]]
#   #   name = "node2"
#   #   namespace = ""
#   #   identifier_type = ""
#   #   identifier = ""
#   #
#   ## Node Group
#   ## Sets defaults so they aren't required in every node.
#   ## Default values can be set for:
#   ## * Metric name
#   ## * OPC UA namespace
#   ## * Identifier
#   ## * Default tags
#   ##
#   ## Multiple node groups are allowed
#   #[[inputs.opcua.group]]
#   ## Group Metric name. Overrides the top level name.  If unset, the
#   ## top level name is used.
#   # name =
#   #
#   ## Group default namespace. If a node in the group doesn't set its
#   ## namespace, this is used.
#   # namespace =
#   #
#   ## Group default identifier type. If a node in the group doesn't set its
#   ## namespace, this is used.
#   # identifier_type =
#   #
#   ## Default tags that are applied to every node in this group. Can be
#   ## overwritten in a node by setting a different value for the tag name.
#   ##   example: default_tags = { tag1 = "value1" }
#   # default_tags = {}
#   #
#   ## Node ID Configuration.  Array of nodes with the same settings as above.
#   ## Use either the inline notation or the bracketed notation, not both.
#   #
#   ## Inline notation (default_tags not supported yet)
#   # nodes = [
#   #  {name="node1", namespace="", identifier_type="", identifier=""},
#   #  {name="node2", namespace="", identifier_type="", identifier=""},
#   #]
#   #
#   ## Bracketed notation
#   # [[inputs.opcua.group.nodes]]
#   #   name = "node1"
#   #   namespace = ""
#   #   identifier_type = ""
#   #   identifier = ""
#   #   default_tags = { tag1 = "override1", tag2 = "value2" }
#   #
#   # [[inputs.opcua.group.nodes]]
#   #   name = "node2"
#   #   namespace = ""
#   #   identifier_type = ""
#   #   identifier = ""

#   ## Enable workarounds required by some devices to work correctly
#   # [inputs.opcua.workarounds]
#     ## Set additional valid status codes, StatusOK (0x0) is always considered valid
#     # additional_valid_status_codes = ["0xC0"]

#   # [inputs.opcua.request_workarounds]
#     ## Use unregistered reads instead of registered reads
#     # use_unregistered_reads = false

# Configuration for sending metrics to InfluxDB 2.0
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  # urls = ["https://127.0.0.1:8086/"]
  urls = ["https://192.168.68.251:8086/"]

  ## Token for authentication.
  token = "token"

  ## Organization is the name of the organization you wish to write to.
  organization = "my_org"

  ## Destination bucket to write into.
  bucket = "test"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  # bucket_tag = ""

  ## If true, the bucket tag will not be added to the metric.
  # exclude_bucket_tag = false

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## HTTP User-Agent
  user_agent = "telegraf"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"

  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

  ## Optional TLS Config for use on HTTP connections.
  tls_ca = "/etc/telegraf/certs/ca.crt"
  tls_cert = "/etc/telegraf/certs/server.crt"
  tls_key = "/etc/telegraf/certs/server.key"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = true
